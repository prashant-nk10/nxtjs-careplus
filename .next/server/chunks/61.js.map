{"version":3,"file":"61.js","mappings":"kvBACA,IAAAA,EAAA,WAAAA,eAAA,WAAAC,CAAA,EACA,UAAAA,EAAAC,UAAA,CAAAD,EAAA,CAA6C,QAAAA,CAAA,CAC7C,EACAE,OAAAC,cAAA,CAAAC,EAAA,aAA6C,CAAEC,MAAA,KAC/CD,EAAAE,oBAA4B,QAQ5B,IAAAC,EAAAR,EAAmDS,EAAQ,QAC3DC,EAA+BD,EAAQ,OACvCE,EAAcF,EAAQ,OAwBtB,eAAAG,IACA,IACA,MAAAC,MAAA,GACA,CACA,MAAAC,EAAA,CAEA,CACA,CAGA,MAAAP,EAGAQ,WAAA,CACAC,YAAA,IAAAC,OAAA,CACAC,MAAA,CACAC,MAAA,CACAC,KAAA,CACAC,oBAAA,8CACAC,uBAAA,QACAC,2BAAA,4DACAC,mBAAAC,CAAA,CAAAC,CAAA,EACA,IAAAC,EAAAnB,EAAAoB,OAAA,CAAAD,OAAA,CAAAF,GACAE,EAAAE,SAAA,CAAAH,GACA,KAAAX,WAAA,CAAAe,IAAA,EACAC,KAAAN,EACAE,QAAAA,EACAD,UAAAA,CACA,EACA,CACAM,YAAAb,CAAA,EAEAP,IACA,KAAAG,WAAA,IACA,KAAAK,KAAA,CAAAT,EAAAsB,OAAA,CAAAC,QAAA,MAAAb,mBAAA,MAAAC,sBAAA,EACA,KAAAJ,MAAA,CAAAP,EAAAwB,KAAA,CAAAC,SAAA,MAAAf,mBAAA,MAAAC,sBAAA,EACA,KAAAH,MAAA,EAAwB,GAAAA,CAAA,CACxB,CACAkB,SAAA,CACA,KAAAtB,WAAA,EAAAuB,QAAA,GAAAC,EAAAZ,OAAA,CAAAa,WAAA,CAAAD,EAAAb,SAAA,EACA,CACAe,QAAA,CACA,KAAAjB,kBAAA,iCAAAkB,SAAA,CAAAC,IACA,KAAAnB,kBAAA,kCAAAoB,SAAA,CAAAD,IACA,KAAAnB,kBAAA,mCAAAqB,MAAA,CAAAF,IACA,KAAAnB,kBAAA,gCAAAsB,OAAA,CAAAH,GACA,CACAI,kBAAAC,CAAA,EACA,KAAA9B,MAAA,CAAA8B,EAAAZ,SAAA,MAAAf,mBAAA,MAAAC,sBAAA,CACA,CACA2B,iBAAAC,CAAA,EACA,KAAA9B,KAAA,CAAA8B,EAAAhB,QAAA,MAAAb,mBAAA,MAAAC,sBAAA,CACA,CACA6B,UAAAhC,CAAA,EACA,KAAAA,MAAA,EAAwB,GAAAA,CAAA,CACxB,CACAiC,WAAA,CACA,YAAAjC,MAAA,CAEAuB,UAAA,CAAgBW,QAAAA,CAAA,CAAS,EAGzB,eAAAA,EAAAC,MAAA,EAGA,KAAAnC,MAAA,CAAAoC,iBAAA,YAAApC,MAAA,CAAAoC,iBAAA,CAAAF,GAFA,OAKA,IAAAG,EAAA,KAAAtC,MAAA,CAAAuC,SAAA,SAAmDJ,EAAAC,MAAA,CAAe,GAClEI,KAAA/C,EAAAgD,QAAA,CAAAC,MAAA,CACAC,WAAA,CACA,CAAAnD,EAAAoD,kBAAA,CAAAC,QAAA,EAAAC,SA8DAC,CAAA,CAAAC,EAAA,KACA,IAAAC,EAAA,GAAmBF,EAAO,SAC1B,EAAAG,QAAA,OAAAF,EAAAG,UAAA,MACA,GAAkBF,EAAI,EAAED,EAAAI,KAAA,IAAc,EAEtC,EAAAF,QAAA,OAAAF,EAAAG,UAAA,MAGA,GAAcF,EAAI,EAAED,EAAK,EAFzB,GAAkBC,EAAI,GAAGD,EAAAI,KAAA,IAAc,GApEvCjB,EAAAY,MAAA,CAAAZ,EAAAa,IAAA,EACA,CAAAxD,EAAAoD,kBAAA,CAAAS,WAAA,EAAAlB,EAAAC,MAAA,CACA,CAAA5C,EAAAoD,kBAAA,CAAAU,WAAA,EAAAnB,EAAAa,IAAA,CACA,qBACA,CACA,GACAO,EAAA9D,EAAAwB,KAAA,CAAAuC,OAAA,CAAA/D,EAAAgE,OAAA,CAAAC,MAAA,GAAApB,GACAqB,EAAA,GACAlE,EAAAmE,WAAA,CAAAC,MAAA,CAAAN,EAAAI,GACA,KAAA1D,MAAA,CAAAuB,SAAA,EACA,KAAAvB,MAAA,CAAAuB,SAAA,EAAoCW,QAAAA,EAAAG,KAAAA,EAAAwB,kBAAAH,CAAA,GAEpCI,MAAAC,OAAA,CAAA7B,EAAA8B,OAAA,EACA9B,EAAA8B,OAAA,CAAArD,IAAA,IAAA3B,OAAAiF,OAAA,CAAAP,GAAAQ,IAAA,IAGAhC,EAAA8B,OAAA,EAAAhF,OAAAiF,OAAA,CAAAP,GACAS,GAAA,GAAAC,EAAAC,EAAA,MAAoCD,EAAE,IAAIC,EAAE;AAAA,GAC5CC,IAAA,KAEA,KAAAzE,WAAA,CAAA0E,GAAA,CAAArC,EAAAG,EACA,CACAZ,UAAA,CAAgBS,QAAAA,CAAA,CAAAsC,SAAAA,CAAA,CAAmB,EACnC,IAAAnC,EAAA,KAAAxC,WAAA,CAAA4E,GAAA,CAAAvC,GACA,GAAAG,KAAAqC,IAAArC,EAAA,CAIA,IAAAsC,EAAAC,SAjHAZ,CAAA,EACA,IAAApD,EAAA,iBACA,QAAAiE,EAAA,EAAoBA,EAAAb,EAAAc,MAAA,CAAoBD,GAAA,GACxC,IAAAT,EAAAJ,CAAA,CAAAa,EAAA,CACA,GAAAT,EAAAU,MAAA,GAAAlE,EAAAkE,MAAA,EAAAV,EAAAW,QAAA,GAAAC,WAAA,KAAApE,EAAA,CACA,IAAAyD,EAAAY,OAAAjB,CAAA,CAAAa,EAAA,IACA,IAAAI,OAAAC,KAAA,CAAAD,OAAAZ,IACA,OAAAA,EAEA,KACA,CACA,CAEA,EAoGAG,EAAAR,OAAA,EACAmB,EAAA,CACA,CAAA5F,EAAAoD,kBAAA,CAAAyC,gBAAA,EAAAZ,EAAAa,UAAA,EAEAV,GACAQ,CAAAA,CAAA,CAAA5F,EAAAoD,kBAAA,CAAA2C,4BAAA,EAAAX,CAAA,EAEAtC,EAAAkD,aAAA,CAAAJ,GACA9C,EAAAmD,SAAA,EACAC,KAAAjB,EAAAa,UAAA,MAAA7F,EAAAkG,cAAA,CAAAC,KAAA,CAAAnG,EAAAkG,cAAA,CAAAE,EAAA,CACAC,QAAAC,OAAAtB,EAAAa,UAAA,CACA,EACA,CACA,CACA3D,OAAA,CAAaQ,QAAAA,CAAA,CAAS,EACtB,IAAAG,EAAA,KAAAxC,WAAA,CAAA4E,GAAA,CAAAvC,EACAwC,MAAAA,IAAArC,IACAA,EAAA0D,GAAA,GACA,KAAAlG,WAAA,CAAAmG,MAAA,CAAA9D,GAEA,CACAP,QAAA,CAAcO,QAAAA,CAAA,CAAA+D,MAAAA,CAAA,CAAgB,EAC9B,IAAA5D,EAAA,KAAAxC,WAAA,CAAA4E,GAAA,CAAAvC,EACAwC,MAAAA,IAAArC,IACAA,EAAA6D,eAAA,CAAAD,GACA5D,EAAAmD,SAAA,EACAC,KAAAjG,EAAAkG,cAAA,CAAAC,KAAA,CACAE,QApJA,aAAAM,eACAF,EAAAG,MAAA,CAAAjC,GAAA,IAAAkC,EAAAR,OAAA,EAAAvB,IAAA,OAEA2B,EAAAJ,OAAA,GAmJAxD,EAAA0D,GAAA,GAEA,CACA,CACA7G,EAAAE,oBAA4B,CAAAA","sources":["webpack://carepulse/./node_modules/opentelemetry-instrumentation-fetch-node/build/index.js?76ec"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FetchInstrumentation = void 0;\n/*\n * Portions from https://github.com/elastic/apm-agent-nodejs\n * Copyright Elasticsearch B.V. and other contributors where applicable.\n * Licensed under the BSD 2-Clause License; you may not use this file except in\n * compliance with the BSD 2-Clause License.\n *\n */\nconst node_diagnostics_channel_1 = __importDefault(require(\"node:diagnostics_channel\"));\nconst semantic_conventions_1 = require(\"@opentelemetry/semantic-conventions\");\nconst api_1 = require(\"@opentelemetry/api\");\nfunction getMessage(error) {\n    if (error instanceof AggregateError) {\n        return error.errors.map((e) => e.message).join(', ');\n    }\n    return error.message;\n}\n// Get the content-length from undici response headers.\n// `headers` is an Array of buffers: [k, v, k, v, ...].\n// If the header is not present, or has an invalid value, this returns null.\nfunction contentLengthFromResponseHeaders(headers) {\n    const name = 'content-length';\n    for (let i = 0; i < headers.length; i += 2) {\n        const k = headers[i];\n        if (k.length === name.length && k.toString().toLowerCase() === name) {\n            const v = Number(headers[i + 1]);\n            if (!Number.isNaN(Number(v))) {\n                return v;\n            }\n            return undefined;\n        }\n    }\n    return undefined;\n}\nasync function loadFetch() {\n    try {\n        await fetch('');\n    }\n    catch (_) {\n        //\n    }\n}\n// A combination of https://github.com/elastic/apm-agent-nodejs and\n// https://github.com/gadget-inc/opentelemetry-instrumentations/blob/main/packages/opentelemetry-instrumentation-undici/src/index.ts\nclass FetchInstrumentation {\n    // Keep ref to avoid https://github.com/nodejs/node/issues/42170 bug and for\n    // unsubscribing.\n    channelSubs;\n    spanFromReq = new WeakMap();\n    tracer;\n    config;\n    meter;\n    instrumentationName = 'opentelemetry-instrumentation-node-18-fetch';\n    instrumentationVersion = '1.0.0';\n    instrumentationDescription = 'Instrumentation for Node 18 fetch via diagnostics_channel';\n    subscribeToChannel(diagnosticChannel, onMessage) {\n        const channel = node_diagnostics_channel_1.default.channel(diagnosticChannel);\n        channel.subscribe(onMessage);\n        this.channelSubs.push({\n            name: diagnosticChannel,\n            channel,\n            onMessage,\n        });\n    }\n    constructor(config) {\n        // Force load fetch API (since it's lazy loaded in Node 18)\n        loadFetch();\n        this.channelSubs = [];\n        this.meter = api_1.metrics.getMeter(this.instrumentationName, this.instrumentationVersion);\n        this.tracer = api_1.trace.getTracer(this.instrumentationName, this.instrumentationVersion);\n        this.config = { ...config };\n    }\n    disable() {\n        this.channelSubs?.forEach((sub) => sub.channel.unsubscribe(sub.onMessage));\n    }\n    enable() {\n        this.subscribeToChannel('undici:request:create', (args) => this.onRequest(args));\n        this.subscribeToChannel('undici:request:headers', (args) => this.onHeaders(args));\n        this.subscribeToChannel('undici:request:trailers', (args) => this.onDone(args));\n        this.subscribeToChannel('undici:request:error', (args) => this.onError(args));\n    }\n    setTracerProvider(tracerProvider) {\n        this.tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);\n    }\n    setMeterProvider(meterProvider) {\n        this.meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);\n    }\n    setConfig(config) {\n        this.config = { ...config };\n    }\n    getConfig() {\n        return this.config;\n    }\n    onRequest({ request }) {\n        // Don't instrument CONNECT - see comments at:\n        // https://github.com/elastic/apm-agent-nodejs/blob/c55b1d8c32b2574362fc24d81b8e173ce2f75257/lib/instrumentation/modules/undici.js#L24\n        if (request.method === 'CONNECT') {\n            return;\n        }\n        if (this.config.ignoreRequestHook && this.config.ignoreRequestHook(request) === true) {\n            return;\n        }\n        const span = this.tracer.startSpan(`HTTP ${request.method}`, {\n            kind: api_1.SpanKind.CLIENT,\n            attributes: {\n                [semantic_conventions_1.SemanticAttributes.HTTP_URL]: getAbsoluteUrl(request.origin, request.path),\n                [semantic_conventions_1.SemanticAttributes.HTTP_METHOD]: request.method,\n                [semantic_conventions_1.SemanticAttributes.HTTP_TARGET]: request.path,\n                'http.client': 'fetch',\n            },\n        });\n        const requestContext = api_1.trace.setSpan(api_1.context.active(), span);\n        const addedHeaders = {};\n        api_1.propagation.inject(requestContext, addedHeaders);\n        if (this.config.onRequest) {\n            this.config.onRequest({ request, span, additionalHeaders: addedHeaders });\n        }\n        if (Array.isArray(request.headers)) {\n            request.headers.push(...Object.entries(addedHeaders).flat());\n        }\n        else {\n            request.headers += Object.entries(addedHeaders)\n                .map(([k, v]) => `${k}: ${v}\\r\\n`)\n                .join('');\n        }\n        this.spanFromReq.set(request, span);\n    }\n    onHeaders({ request, response }) {\n        const span = this.spanFromReq.get(request);\n        if (span !== undefined) {\n            // We are currently *not* capturing response headers, even though the\n            // intake API does allow it, because none of the other `setHttpContext`\n            // uses currently do.\n            const cLen = contentLengthFromResponseHeaders(response.headers);\n            const attrs = {\n                [semantic_conventions_1.SemanticAttributes.HTTP_STATUS_CODE]: response.statusCode,\n            };\n            if (cLen) {\n                attrs[semantic_conventions_1.SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH] = cLen;\n            }\n            span.setAttributes(attrs);\n            span.setStatus({\n                code: response.statusCode >= 400 ? api_1.SpanStatusCode.ERROR : api_1.SpanStatusCode.OK,\n                message: String(response.statusCode),\n            });\n        }\n    }\n    onDone({ request }) {\n        const span = this.spanFromReq.get(request);\n        if (span !== undefined) {\n            span.end();\n            this.spanFromReq.delete(request);\n        }\n    }\n    onError({ request, error }) {\n        const span = this.spanFromReq.get(request);\n        if (span !== undefined) {\n            span.recordException(error);\n            span.setStatus({\n                code: api_1.SpanStatusCode.ERROR,\n                message: getMessage(error),\n            });\n            span.end();\n        }\n    }\n}\nexports.FetchInstrumentation = FetchInstrumentation;\nfunction getAbsoluteUrl(origin, path = '/') {\n    const url = `${origin}`;\n    if (origin.endsWith('/') && path.startsWith('/')) {\n        return `${url}${path.slice(1)}`;\n    }\n    if (!origin.endsWith('/') && !path.startsWith('/')) {\n        return `${url}/${path.slice(1)}`;\n    }\n    return `${url}${path}`;\n}\n//# sourceMappingURL=index.js.map"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","FetchInstrumentation","node_diagnostics_channel_1","__webpack_require__","semantic_conventions_1","api_1","loadFetch","fetch","_","channelSubs","spanFromReq","WeakMap","tracer","config","meter","instrumentationName","instrumentationVersion","instrumentationDescription","subscribeToChannel","diagnosticChannel","onMessage","channel","default","subscribe","push","name","constructor","metrics","getMeter","trace","getTracer","disable","forEach","sub","unsubscribe","enable","onRequest","args","onHeaders","onDone","onError","setTracerProvider","tracerProvider","setMeterProvider","meterProvider","setConfig","getConfig","request","method","ignoreRequestHook","span","startSpan","kind","SpanKind","CLIENT","attributes","SemanticAttributes","HTTP_URL","getAbsoluteUrl","origin","path","url","endsWith","startsWith","slice","HTTP_METHOD","HTTP_TARGET","requestContext","setSpan","context","active","addedHeaders","propagation","inject","additionalHeaders","Array","isArray","headers","entries","flat","map","k","v","join","set","response","get","undefined","cLen","contentLengthFromResponseHeaders","i","length","toString","toLowerCase","Number","isNaN","attrs","HTTP_STATUS_CODE","statusCode","HTTP_RESPONSE_CONTENT_LENGTH","setAttributes","setStatus","code","SpanStatusCode","ERROR","OK","message","String","end","delete","error","recordException","AggregateError","errors","e"],"sourceRoot":""}